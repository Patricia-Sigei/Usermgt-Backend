"""Recreating migration history

Revision ID: d1e46458c530
Revises: 
Create Date: 2025-03-04 13:04:17.623014

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd1e46458c530'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('orders', schema=None) as batch_op:
        batch_op.alter_column('order_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               nullable=False)
        batch_op.alter_column('order_description',
               existing_type=sa.VARCHAR(length=250),
               nullable=False)
        batch_op.alter_column('space',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('vat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('payment_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.alter_column('dispatch_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.drop_constraint('fk_user', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint('fk_user_scanned', type_='foreignkey')
        batch_op.drop_column('scanned_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('scanned_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_user_scanned', 'scanned', ['scanned_id'], ['id'])

    with op.batch_alter_table('orders', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('fk_user', 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.alter_column('dispatch_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('payment_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('vat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('space',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('order_description',
               existing_type=sa.VARCHAR(length=250),
               nullable=True)
        batch_op.alter_column('order_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               nullable=True)

    op.create_table('vendors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('vendors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('county', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('kra_pin', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('bank_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('account_number', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('mpesa_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('mpesa_paybill', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('buy_goods_till', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_person_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_person_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_person_phone', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='vendors_pkey'),
    sa.UniqueConstraint('email', name='vendors_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('request',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('returned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('scanned_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('name', name='users_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('assignment',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('assignment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('assigned_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('return_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], name='assignment_location_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='assignment_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('contact_persons',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], name='contact_persons_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='contact_persons_pkey')
    )
    op.create_table('documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], name='documents_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='documents_pkey')
    )
    op.create_table('location',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('location_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='location_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('asset',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('item', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('specifications', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('class_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('serial_no', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('assignment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('depreciation_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('purchase_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('depreciation_end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('purchase_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vendor', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'unassigned'::character varying"), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignment.id'], name='asset_assignment_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], name='asset_location_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='asset_pkey'),
    sa.UniqueConstraint('serial_no', name='asset_serial_no_key')
    )
    op.create_table('received',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('received_quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_received', sa.DATE(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='fk_order', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='received_pkey')
    )
    # ### end Alembic commands ###
